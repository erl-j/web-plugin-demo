{"version":3,"sources":["logo.svg","Constants.js","utils.js","Space.js","App.js","reportWebVitals.js","index.js"],"names":["CATEGORY_COLORS","Kick","Snare","Clap","HHC","HHO","Tom","Perc","Cymbal","FX","vis","platform","Space","ref","React","createRef","useState","selectedSampleIndex","setSelectedSampleIndex","minProbability","maxProbability","useEffect","console","log","loadPlatform","data","path","sendMessage","D3Component","current","updateThings","style","cursor","margin","width","height","containerEl","props","xScale","d3","domain","yScale","pointSeries","fc","mainValue","d","coord_y","crossValue","coord_x","size","decorate","program","points","i","fillColor","zoom","on","draw","chart","this","webglPlotArea","selection","enter","call","event","cx","invert","offsetX","cy","offsetY","closestSampleIndex","reduce","prev","c","index","new_dist","value","hex","result","exec","parseInt","hexToRgb","category","map","datum","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb7eb961.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const AUDIO_BUCKET_URL =\n  \"https://storage.googleapis.com/xln-poseidon/oneshots\";\n\nexport const CATEGORY_COLORS = {\n  Kick: \"#FD3852\",\n\n  Snare: \"#2890DB\",\n\n  Clap: \"#C07F91\",\n\n  HHC: \"#D9AD25\",\n\n  HHO: \"#1EAB3F\",\n\n  Tom: \"#DA7EF6\",\n\n  Perc: \"#F09E25\",\n\n  Cymbal: \"#D34E8E\",\n\n  FX: \"#00B5C1\",\n};\n\nexport const BG_COLOR = \"#1e2125\";\n","export const validateFile = (file) => {\n  if (file.type != \"audio/wav\") {\n    return false;\n  }\n  return true;\n};\n\nexport const getUserFromLocalStorage = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? [\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16),\n      ]\n    : [0, 0, 0];\n}\n\nexport const lerp = (a, b, mix) => {\n  return a.map((ae, i) => ae * (1 - mix) + b[i] * mix);\n};\n","import * as d3 from \"d3\";\nimport * as fc from \"d3fc\";\nimport React from \"react\";\nimport { CATEGORY_COLORS } from \"./Constants\";\nimport data from \"./sample_data.json\";\nimport { hexToRgb } from \"./utils\";\n\n// const loadPlatform = () => {\n//   let obj = {};\n//   obj.sendMessage = (message, data) => {\n//     console.log(`sending message ${message} with data : ${data}`);\n//   };\n//   return obj;\n// };\n\nconst H = 833;\n\nconst W = 1200;\n\nlet vis = null;\n\nlet platform = null;\n\nconst Space = ({}) => {\n  const ref = React.createRef();\n\n  const [selectedSampleIndex, setSelectedSampleIndex] = React.useState();\n\n  const [minProbability, setMinProbability] = React.useState(-0.01);\n\n  const [maxProbability, setMaxProbability] = React.useState(1.01);\n\n  React.useEffect(() => {\n    if (platform === null) {\n      console.log(\"loading platform\");\n      // eslint-disable-next-line no-undef\n      platform = loadPlatform();\n    }\n    console.log(\"loaded platform\");\n  });\n\n  React.useEffect(() => {\n    if (selectedSampleIndex) {\n      console.log(`playing sample ${data[selectedSampleIndex].path}`);\n      platform.sendMessage(\"playSample\", [data[selectedSampleIndex].path]);\n    }\n  }, [selectedSampleIndex]);\n\n  React.useEffect(() => {\n    vis = new D3Component(ref.current, { data, setSelectedSampleIndex });\n  }, []);\n\n  React.useEffect(() => {\n    vis.updateThings({\n      data,\n      minProbability,\n      maxProbability,\n    });\n  }, [minProbability, maxProbability]);\n\n  return (\n    <>\n      {/* <div>\n        Min like probability\n        <input\n          type=\"slider\"\n          type=\"range\"\n          min={-0.01}\n          max={1.0}\n          step={0.001}\n          value={minProbability}\n          onChange={(e) => setMinProbability(e.target.value)}\n        ></input>\n      </div>\n      <div>\n        Max like probability\n        <input\n          type=\"slider\"\n          type=\"range\"\n          min={0.0}\n          max={1.01}\n          step={0.001}\n          value={maxProbability}\n          onChange={(e) => setMaxProbability(e.target.value)}\n        ></input>\n      </div> */}\n\n      <div\n        style={{\n          cursor: \"pointer\",\n          margin: 30,\n          width: W,\n          height: H,\n        }}\n        ref={ref}\n      ></div>\n    </>\n  );\n};\n\nexport default Space;\n\nclass D3Component {\n  containerEl;\n  props;\n  svg;\n  data;\n\n  xScale = d3.scaleLinear().domain([0, 1]);\n\n  yScale = d3.scaleLinear().domain([0, 1]);\n\n  pointSeries = fc\n    .seriesWebglPoint()\n    .mainValue((d) => 1 - d.coord_y)\n    .crossValue((d) => d.coord_x)\n    .size((d) => 20)\n    .decorate((program, points, i) => {\n      this.fillColor(program);\n    });\n\n  zoom = fc.zoom().on(\"zoom\", () => {\n    this.draw();\n  });\n\n  chart = fc\n    .chartCartesian({\n      xScale: this.xScale,\n      yScale: this.yScale,\n    })\n    .webglPlotArea(this.pointSeries)\n    .decorate((selection) => {\n      selection.enter().call(this.zoom, this.xScale, this.yScale);\n      selection.on(\"click\", (event, data) => {\n        let cx = this.xScale.invert(event.offsetX);\n        let cy = this.yScale.invert(event.offsetY);\n        let closestSampleIndex = data.reduce(\n          (prev, c, index) => {\n            let new_dist = (cx - c.coord_x) ** 2 + (cy - c.coord_y) ** 2;\n            if (new_dist < prev.value) {\n              return { value: new_dist, index: index };\n            } else {\n              return prev;\n            }\n          },\n          { value: 9999, index: -1 }\n        ).index;\n        this.setSelectedSampleIndex(closestSampleIndex);\n      });\n    });\n\n  minProbability = 0;\n  maxProbability = 1;\n\n  draw = () => {\n    this.fillColor = fc\n      .webglFillColor()\n      .data(this.data)\n      .value((d, i) => {\n        return true\n          ? [...hexToRgb(CATEGORY_COLORS[d.category]).map((c) => c / 255), 1]\n          : [0.2, 0.2, 0.2, 1];\n        // return d.like_probability > this.minProbability\n        //   ? [\n        //       ...hexToRgb(CATEGORY_COLORS[d.category]).map((c) => c / 255),\n        //       d.like_probability,\n        //     ]\n        //   : [0.2, 0.2, 0.2, 1];\n      });\n\n    d3.select(this.containerEl).datum(this.data).call(this.chart);\n  };\n\n  constructor(containerEl, props) {\n    this.containerEl = containerEl;\n    this.setSelectedSampleIndex = props.setSelectedSampleIndex;\n    this.data = props.data;\n\n    // this.xScale.domain(\n    //   fc.extentLinear().accessors([(d) => d.coord_x])(this.data)\n    // );\n    // this.yScale.domain(\n    //   fc.extentLinear().accessors([(d) => d.coord_y])(this.data)\n    // );\n\n    this.draw();\n  }\n\n  updateThings = (props) => {\n    this.data = props.data;\n    this.minProbability = props.minProbability;\n    this.maxProbability = props.maxProbability;\n\n    this.selectedSampleIndex = props.selectedSampleIndex;\n\n    this.draw();\n  };\n}\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Space from \"./Space\";\n\nfunction App() {\n  return <Space></Space>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}